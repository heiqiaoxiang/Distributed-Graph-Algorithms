
"""
Ricart and Agrawala's, based on logical timestamps and token
 
 Pi:
   //simplified by omitting _i for all varibles below.
   ts: logical timestamp starting at 0 and inc by 1, initialized to 0.
   requests: array of ts values, where requests[k] is ts of Pk's last 
             request for token, initialized to 0.
   token: array of ts values, where token[k] is ts of the token's last
          assignment to Pk, initialized to 0.
   token_present: boolean for whether token is present to Pi
   token_held: boolean for whether token is held by Pi, initialized to false.
 
   request:
     if not token_present:
       send (requests,ts,i) to all other processes
     await:
       having received (token)
     token_present := true
     token_held := true
 
   CS
 
   release:
     token[i] := ts
     token_held := false
     for j from i+1 to n, 1 to i-1:
       if requests[j]>token[j] and token_present:
         token_present := false
         send (token) to Pj
 
   receive (requests,ts_j,j):
     requests[j] := max(requests[j],ts_j)
     if token_present and not token_held:
       do steps under release

"""

nprocs = 5 # default number of processes
cs_count = 5 # default number of calls to CS

def Pi(proc):
    return ord(repr(proc)) - ord('A')

class P(DistProcess):
    
    def setup(ps):        
        other_procs = ps

        '''requests: array of ts values, where requests[k] is 
        ts of Pk's last request for token, initialized to 0.'''
        global requests
        requests = [0] * nprocs

        '''token: array of ts values, where token[k] is ts of 
        the token's last assignment to Pk, initialized to 0.'''
        global token
        token = [0] * nprocs

        token_present = False # boolean for whether token is present to Pi
        token_held = False # boolean for whether token is held by Pi, initialized to false.

        token_received = False # This boolean is flipped, when Reply("token") is received

        if Pi(self) == 0:
            token_received = True

    def cs(task):
        global requests
        global token

        '''request:
             if not token_present:
               send (requests,ts,i) to all other processes
             await:
               having received (token)
             token_present := true
             token_held := true '''

        --start
        if not token_present:
            incr_logical_clock()
            #output("Sending Requests...")
            send(Request( logical_clock() ), other_procs)

        --reply
        # await: having received (token)
        await(token_received == True)
        # We know we received it, so:
        token_received = False

        token_present = True
        token_held = True

        --cs
        task()

        --release
        do_release()

        --end

    def do_release():
        '''
        release:
         token[i] := ts
         token_held := false
         for j from i+1 to n, 1 to i-1:
           if requests[j]>token[j] and token_present:
             token_present := false
             send (token) to Pj'''

        global requests
        global token

        token[Pi(self)] = logical_clock()
        token_held = False

        waiting = list(filter(lambda p: requests[Pi(p)] > token[Pi(p)], other_procs))

        if waiting:
            req_time = lambda p: requests[Pi(p)]
            waited_longest = waiting[0]
            # I would have used the min function here, but it causes mysterious errors
            for proc in waiting:
                if req_time(proc) < req_time(waited_longest):
                    waited_longest = proc

            output("Is releasing.")

            token_present = False

            output("Handing token to "+repr(waited_longest))

            incr_logical_clock()
            send( Reply("token"), waited_longest )

    def OnRequest(ts):
        '''receive (requests,ts_j,j):
             requests[j] := max(requests[j],ts_j)
             if token_present and not token_held:
               do steps under release '''

        global requests
        j = Pi(_source)
        requests[j] = max(requests[j], ts)
        if token_present and not token_held:
            do_release()

    def OnReply(tok):
        if tok == "token":
            token_received = True
        else:
            raise Exception("Invalid Reply received.")

    def main():
        global cs_count

        def anounce():
            output("In cs!")

        #for i in range(0, cs_count):
        while True:
            cs(anounce)

def main():
    # number of times to execute critical section
    global cs_count
    if len(sys.argv) > 2:
        cs_count = int(sys.argv[2])

    # configuration: number of processes
    global nprocs
    if len(sys.argv) > 1:
        nprocs = int(sys.argv[1])
    if nprocs > 26:
        nprocs = 26
    elif nprocs < 2:
        nprocs = 2

    use_channel("tcp")

    # create n process
    ps = createprocs(P, { chr(ord('A') + i) for i in range(0,nprocs) })
    ps = set(ps.values())

    # setup the processes
    for p in ps: setupprocs([p], [ps-{p}])

    startprocs(ps)

    for p in (ps): p.join()
