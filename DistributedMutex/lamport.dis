
# Lamport's 3n message algorithm

"""
Lamport's algorithm, based on timestamps of a logical clock 
 
 assume fifo channel 
 
 Pi: 
   ts_i: value of logical clock starting at 0 and inc by 1, initialized to 0. 
   queue_i: queue for pending requests ordered by the logical timestamp, init[] 
 
   request: 
     add (request,ts_i,i) to queue_i 
     send (request,ts_i,i) to all other processes 
 
     await: 
       (request,ts_i,i) where (ts_i,i) < others in queue_i, and 
       having received (reply,ts_j,j) with (ts_j,j)> (ts_i,i) from all Pj 
                --if put receive seperately, need counter. 
   CS                            
 
   release: 
     remove request from queue_i 
     send (release,ts_i,i) to all other processes 
 
   receive (request,ts_j,j): 
     add (request,ts_j,j) to queue_i 
     send (reply,ts_i,i) to Pj 
 
   receive (release,ts_j,j): 
     remove (request,ts_j,j) from queue_i 
 
   omitted receive reply and increment counter.

"""

default_proc_count = 3
cs_count = 3 # default

class P(DistProcess):

    def setup(ps):
        c = 0
        q = []
        s = ps

    def cs(task):
        # to enter cs, enque and send request to all, then await replies from all
        --start
        reqc = logical_clock()
        q.append((reqc, self))
        send(Request(reqc), s)

        --reply
        await(all((p2 == self or (reqc, self) < (c2, p2)) for (c2, p2) in q) and
              all(any(c3 > reqc for c3 in received(Reply(c3, p3))) for p3 in s))

     # critical section
        --cs
        task()

     # to exit cs, deque and send releases to all
        --release
        q.remove((reqc, self))
        send(Release(reqc), s)
        output("release cs")
        --end
        reqc = None

    def main():
        def anounce():
            output("In cs!")
        for _ in range(0, cs_count):
            cs(anounce)

    # when receiving requests from others, enque and reply
    def OnRequest(reqts):
        #output("OnRequest, ts: %d" % _timestamp)
        q.append((reqts, _source))
        send(Reply(logical_clock(), self), _source)

    # when receiving release from others, deque
    def OnRelease(time):
        if ((time, _source) in q):
            q.remove((time, _source))

def main():
    # number of times to execute critical section
    global cs_count
    if len(sys.argv) > 2:
        cs_count = int(sys.argv[2])

    # configuration: number of processes
    if len(sys.argv) > 1:
        nprocs = int(sys.argv[1])
    else:
        nprocs = default_proc_count

    use_channel("tcp")

    # create n process
    if nprocs > 26:
        ps = createprocs(P, {'Process-%d'%i for i in range(1,nprocs+1)})
    else:
        ps = createprocs(P, {chr(ord('A') + i) for i in range(0,nprocs)})
    ps = set(ps.values())

    # setup the processes
    for p in ps: setupprocs([p], [ps-{p}])

    startprocs(ps)

    for p in (ps): p.join()
